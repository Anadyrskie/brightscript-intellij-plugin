{
  parserClass="com.interfaced.brs.lang.parser.BrsParser"
  parserUtilClass="com.interfaced.brs.lang.parser.BrsParserUtil"

  elementTypeHolderClass="com.interfaced.brs.lang.psi.BrsTypes"
  elementTypeClass="com.interfaced.brs.lang.psi.BrsCompositeElementType"
  tokenTypeClass="com.interfaced.brs.lang.psi.BrsTokenType"

  psiClassPrefix="Brs"
  psiImplClassSuffix="Impl"
  psiPackage="com.interfaced.brs.lang.psi"
  psiImplPackage="com.interfaced.brs.lang.psi.impl"
}

BSProgram ::= statement*
statement ::= (if|for|while|function|print|comment|goto|dim|stop|return|exit)
dim ::= T_DIM identifier "[" dimension_list "]"
assign ::= identifier "=" expression
stop ::= T_STOP
goto ::= T_GOTO label
label ::= identifier T_COLON
return ::= T_RETURN expression?
print ::= T_PRINT expression
and ::= T_AND expression

exit ::= (exit_while|exit_for)
for ::= (for_counter|for_each) (statement)* end_for
while ::= T_WHILE expression (statement)* end_while

if ::= if_then (statement|else)* end_if

if_then ::= T_IF expression T_THEN?
else ::= T_ELSE if_then? statement*

for_counter ::= T_FOR identifier "=" expression T_TO expression step?
for_each ::= T_FOR T_EACH identifier T_IN identifier
function ::= T_FUNCTION identifier "(" parameter_list? ")" as? (statement)* end_function
as ::= T_AS type
type ::= T_IDENTIFIER
parameter_list ::= parameter { "," parameter }*
parameter ::= identifier default? as?
default ::= "=" expression
exit_while ::= T_EXIT T_WHILE
exit_for ::= T_EXIT T_FOR
end_for ::= T_END T_FOR
end_while ::= T_END T_WHILE
end_if ::= T_END T_IF
end_function ::= T_END T_FUNCTION
step ::= T_STEP expression
expression ::= (chars|and|assign|T_STRING_LITERAL|identifier)
identifier ::= T_IDENTIFIER type_designator?
type_designator ::= (T_INT_DESIGNATOR|T_STR_DESIGNATOR|T_FLOAT_DESIGNATOR|T_DOUBLE_DESIGNATOR)
dimension_list ::= chars
comment ::= (T_QUOTE|T_REM) T_COMMENT
chars ::= T_CHAR+
